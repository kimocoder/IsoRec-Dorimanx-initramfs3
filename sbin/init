#!/sbin/busybox sh
cd /;

BB=/sbin/busybox;
$BB chmod 6755 /sbin/recovery;

$BB mount -t proc proc /proc;
$BB mount -t sysfs sysfs /sys;
if [ -e /sys/devices/virtual/sec/sec_key/set_homekey ]; then
	echo 102 > /sys/devices/virtual/sec/sec_key/set_homekey;
fi;

# mount root as rw
$BB mount -t rootfs -o remount,rw rootfs;

if $BB grep -q bootmode=2 /proc/cmdline; then
	# recovery mode
	echo "0" > /proc/sys/kernel/rom_feature_set;


	# attempt isorec (isolated recovery) boot

	# make the /dev/block/platform/dw_mmc/by-name/RECOVERY
	# (/dev/block/mmcblk0p6) partition accessible
	$BB mkdir /isorec-tmp
	$BB mknod /isorec-tmp/mmcblk0p6 b 179 6

	# if the raw partition contains valid lzop-compressed data
	if $BB lzop -dc /isorec-tmp/mmcblk0p6 > /isorec-tmp/isorec.cpio; then
		# and if said data is a valid cpio archive
		if $BB cpio -t < /isorec-tmp/isorec.cpio; then

			# isorec boot

			# unmount everything
			$BB umount /sys
			$BB umount /proc

			# copy busybox to /isorec-tmp
			# WARNING: this assumes static linking
			$BB cp $(readlink -f $BB) /isorec-tmp/busybox
			BB=/isorec-tmp/busybox

			# remove everything not in /isorec-tmp
			$BB mkdir /isorec-tmp/junk
			$BB mv /* /.* /isorec-tmp/junk
			$BB rm -rf /isorec-tmp/junk

			# extract the isorec ramdisk
			$BB cpio -i < /isorec-tmp/isorec.cpio

			# clean up and pass control to ramdisk
			$BB rm -rf /isorec-tmp
			exec /init

		fi
	fi

	# clean up for non-isorec boot
	$BB rm -rf /isorec-tmp


	$BB cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	$BB cp -a /recovery.rc /init.rc;
	# BUG: these mknod commands do nothing because /dev/block does not exist!
	# FIX: mkdir -p /dev/block
	mknod /dev/block/mmcblk0p1 b 179 1;
	mknod /dev/block/mmcblk0p7 b 179 7;
	mknod /dev/block/mmcblk1p1 b 179 9;
	mknod /dev/block/mmcblk0p9 b 259 1;
	mknod /dev/block/mmcblk0p10 b 259 2;
	mknod /dev/block/mmcblk0p11 b 259 3;
	mknod /dev/block/mmcblk0p12 b 259 4;
	mknod /dev/block/loop0 b 7 0;
	exec /sbin/init.recovery;
fi;

if $BB grep -q 1 /sys/class/power_supply/battery/batt_lp_charging; then
	# low power mode
	echo "0" > /proc/sys/kernel/rom_feature_set;
	$BB cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	$BB cp -a lpm.rc init.rc;
	$BB rm init.smdk4210.rc;
	exec /sbin/init.recovery;
fi;

# unmount all sdcards before any folder cleaning
sync;
$BB umount -l /sdcard;
$BB umount -l /extSdCard;
$BB umount -l /mnt/sdcard;
$BB umount -l /storage/sdcard0;
$BB umount -l /storage/sdcard1;

# cleaning and rebuilding the /mnt and sdcards mounts folders
$BB rm -rf /vendor;
$BB rm -rf /tmp/*;
mkdir -p /dev/block;
mkdir /dev/input;
mkdir /dev/graphics;
mkdir -p /mnt/asec;
mkdir -p /mnt/.lfs;
mkdir -p /mnt/obb;
mkdir -p /mnt/secure;
rm -rf /mnt/tmp;
rm -rf /mnt/tmp2;
mkdir -p /mnt/tmp;
mkdir -p /mnt/tmp2;
mkdir -p /mnt/.secondrom;
$BB chmod -R 755 /mnt/;
chmod 0771 /preload;
chown system:system /preload;
$BB chmod -R 777 /storage;
mknod /dev/graphics/fb0 c 29 0;
mknod /dev/input/event1 c 13 65;
mknod /dev/input/event2 c 13 66;
mknod /dev/input/event8 c 13 72;
mknod /dev/input/event9 c 13 73;
mknod /dev/ashmem c 10 61;
mknod /dev/block/mmcblk0p1 b 179 1;
mknod /dev/block/mmcblk0p7 b 179 7;
mknod /dev/block/mmcblk1p1 b 179 9;
mknod /dev/block/mmcblk0p9 b 259 1;
mknod /dev/block/mmcblk0p10 b 259 2;
mknod /dev/block/mmcblk0p11 b 259 3;
mknod /dev/block/mmcblk0p12 b 259 4;
mknod /dev/block/loop0 b 7 0;

# needed for mount exfat binary /system/bin/mount.exfat-fuse
mknod /dev/fuse c 10 229;
chmod 666 /dev/fuse;

# mounting preloaded partition
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /dev/block/mmcblk0p12 /preload;

# mounting system partition needed for exfat mount binary /system/bin/mount.exfat-fuse
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /dev/block/mmcblk0p9 /system;

# replace old /sbin/e2fsck 1.41.14 (22-Dec-2010) in sbin with the /system/bin/e2fsck 1.42.8 (20-Jun-2013)
if [ -e /system/bin/e2fsck ]; then
	cp /system/bin/e2fsck /sbin/e2fsck;
fi;
if [ -e /system/bin/mount.exfat-fuse ]; then
	cp /system/bin/mount.exfat-fuse /sbin/mount.exfat-fuse;
fi;

# check what type of fs sdcards have
FS_SDCARD0=$(eval $(/sbin/blkid /dev/block/mmcblk0p11 | /sbin/busybox cut -c 24-); /sbin/busybox echo $TYPE);
echo "$FS_SDCARD0" > /tmp/sdcard_fs_check;
if [ -e /dev/block/mmcblk1p1 ]; then
	FS_SDCARD1=$(eval $(/sbin/blkid /dev/block/mmcblk1p1 | /sbin/busybox cut -c 23-); /sbin/busybox echo $TYPE);
	echo "$FS_SDCARD1" >> /tmp/sdcard_fs_check;
fi;

# prevent from media storage to dig in clockworkmod backup dir
# added /mnt/tmp/android/.nomedia because my gallery is showing pic from there and media scanner has nothing to sniff around there
if [ "$FS_SDCARD0" == "exfat" ]; then
	sh -c "/system/bin/mount.exfat-fuse /dev/block/mmcblk0p11 /mnt/tmp";
else
	$BB mount -t $FS_SDCARD0 /dev/block/mmcblk0p11 /mnt/tmp;
fi;

mkdir -p /mnt/tmp/clockworkmod/blobs/;
mkdir /mnt/tmp/.secondrom/;
touch /mnt/tmp/.secondrom/.nomedia;
touch /mnt/tmp/clockworkmod/.nomedia;
touch /mnt/tmp/clockworkmod/blobs/.nomedia;
touch /mnt/tmp/Android/.nomedia;

EXSDCARD()
{
	if [ -e /dev/block/mmcblk1p1 ]; then
		# added /mnt/tmp2/android/.nomedia because my gallery is showing pic from there and media scanner has nothing to sniff around there
		if [ "$FS_SDCARD1" == "exfat" ]; then
			sh -c "/system/bin/mount.exfat-fuse /dev/block/mmcblk1p1 /mnt/tmp2";
		else
			$BB mount -t $FS_SDCARD1 /dev/block/mmcblk1p1 /mnt/tmp2;
		fi;
		mkdir -p /mnt/tmp2/clockworkmod/blobs/;
		touch /mnt/tmp2/clockworkmod/.nomedia;
		touch /mnt/tmp2/clockworkmod/blobs/.nomedia;
		touch /mnt/tmp2/Android/.nomedia;

		SDCARD_SIZE=$($BB df | $BB grep /dev/block/mmcblk1p1 | $BB cut -c 23-30)
		if [ "$SDCARD_SIZE" -lt "1000000" ]; then
			echo "1" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "4000000" ]; then
			echo "4" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "8000000" ]; then
			echo "8" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "16000000" ]; then
			echo "16" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "32000000" ]; then
			echo "32" > /tmp/sdcard_size;
		elif [ "$SDCARD_SIZE" -lt "64000000" ]; then
			echo "64" > /tmp/sdcard_size;
		fi;

		#umount only the external sd
		sync;
		$BB umount -l /mnt/tmp2;
	else
		echo "no external sdcard";
	fi;
}

NEXTBOOT=0;
DEFAULTROM=0;
SECONDROM=1;
NOBOOTLOGO=0;

# dual boot check and run
if [ -e /mnt/tmp/.nextboot ]; then
	NEXTBOOT=$(cat /mnt/tmp/.nextboot);
	$BB rm -f /mnt/tmp/.nextboot;
fi;
if [ -e /mnt/tmp/.defaultrom ]; then
	DEFAULTROM=$(cat /mnt/tmp/.defaultrom);
fi;

[ -e /preload/build.prop ] || SECONDROM=0;
[ -e /mnt/tmp/.secondrom/data.img ] || SECONDROM=0;
[ -e /mnt/tmp/.secondrom/cache.img ] || SECONDROM=0;
[ -e /mnt/tmp/.nobootlogo ] && NOBOOTLOGO=1;

if [ "$SECONDROM" -eq "0" ]; then
	if [ "$NOBOOTLOGO" -eq "0" ]; then
		/sbin/choose_rom "$SECONDROM";
	fi;
else
	if [ "$NEXTBOOT" -eq "1" ]; then
		SECONDROM=0;
	elif [ "$NEXTBOOT" -eq "2" ]; then
		SECONDROM=1;
	else
		if [ "$NOBOOTLOGO" -eq "1" ]; then
			SECONDROM=$DEFAULTROM;

		elif [ "$DEFAULTROM" -eq "1" ]; then
			/sbin/choose_rom "$SECONDROM";

			if [ "$?" -eq "1" ]; then
				SECONDROM=0;
			else
				SECONDROM=1;
			fi;
		else
			/sbin/choose_rom $SECONDROM;

			if [ "$?" -eq "1" ]; then
				SECONDROM=1;
			else
				SECONDROM=0;
			fi;
		fi;
	fi;
fi;


if [ "$SECONDROM" -eq "1" ]; then
	$BB rm -rf /res/dev;
	mkdir -p /res/dev;
	ln -s /mnt/.secondrom/.secondrom/data.img /res/dev/data;
	ln -s /dev/block/mmcblk0p12 /res/dev/system;
	ln -s /mnt/.secondrom/.secondrom/cache.img /res/dev/cache;
	echo "1" > /tmp/sec_rom_boot;
	echo "0" > /tmp/pri_rom_boot;
else
	$BB rm -rf /res/dev;
	mkdir -p /res/dev;
	ln -s /dev/block/mmcblk0p10 /res/dev/data;
	ln -s /dev/block/mmcblk0p9 /res/dev/system;
	ln -s /dev/block/mmcblk0p7 /res/dev/cache;
	echo "0" > /tmp/sec_rom_boot;
	echo "1" > /tmp/pri_rom_boot;
fi;

#############################
# Partition global tuning!
#############################

# partition fix by forcing full scan and repair
PARTITION_FIX()
{
	local DEVICE=$1;
	local LOG=$2;

	echo "Fixing partitions..."  >> $LOG;
	echo ""  >> $LOG;
	sh -c "/sbin/e2fsck -p $DEVICE" >> $LOG;
	sh -c "/sbin/e2fsck -fyv $DEVICE" >> $LOG;
	echo ""  >> $LOG;
	echo "Fixing partitions ends."  >> $LOG;
	echo "0" > /tmp/need_check_part;
}

# sdcards fix
SDCARD_FIX()
{
        local LOG_SDCARD0="/log-sdcard0";
        local LOG_SDCARD1="/log-sdcard1";
        local FIX_VFAT_BINARY="/sbin/fsck_msdos";
        local FIX_EXFAT_BINARY="/sbin/fsck.exfat";
        local DEVICE_SDCARD0="/dev/block/mmcblk0p11";
        local DEVICE_SDCARD1="/dev/block/mmcblk1p1";

        # new empty log
        sh -c "/sbin/date" > $LOG_SDCARD0;
        sh -c "/sbin/date" > $LOG_SDCARD1;

        cp /sbin/libexfat_utils.so /system/lib/;
        if [ -e /dev/block/mmcblk1p1 ]; then
                echo "EXTERNAL SDCARD CHECK" >> $LOG_SDCARD1;
                if [ "$FS_SDCARD1" == "exfat" ]; then
                        sh -c "$FIX_EXFAT_BINARY -R $DEVICE_SDCARD1" >> $LOG_SDCARD1;
                elif [ "$FS_SDCARD1" == "vfat" ]; then
                        sh -c "$FIX_VFAT_BINARY -p -f $DEVICE_SDCARD1" >> $LOG_SDCARD1;
                elif [ "$FS_SDCARD1" == "ext4" ]; then
                        PARTITION_FIX $DEVICE_SDCARD1 $LOG_SDCARD1;
                else
                        echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_SDCARD1\"" >> $LOG_SDCARD1;
                fi;
                echo "DONE" >> $LOG_SDCARD1;
        else
                echo "NO EXTERNAL SDCARD FOUND" >> $LOG_SDCARD1;
        fi;

        echo "INTERNAL SDCARD CHECK" >> $LOG_SDCARD0;
        if [ "$FS_SDCARD0" == "exfat" ]; then
                sh -c "$FIX_EXFAT_BINARY -R $DEVICE_SDCARD0"  >> $LOG_SDCARD0;
        elif [ "$FS_SDCARD0" == "vfat" ]; then
                sh -c "$FIX_VFAT_BINARY -p -f $DEVICE_SDCARD0"  >> $LOG_SDCARD0;
        elif [ "$FS_SDCARD0" == "ext4" ]; then
                PARTITION_FIX $DEVICE_SDCARD0 $LOG_SDCARD0;
        else
                echo "UNKOWN OR UNSUPPORTED PARTITION TYPE \"$FS_SDCARD0\"" >> $LOG_SDCARD0;
        fi;
        echo "DONE"  >> $LOG_SDCARD0;
}

NEED_CHECK()
{
	echo "1" > /tmp/need_check_part;
}

# dalvik cache clean if asked
DALVIK_CLEAN()
{
	local DEVICE_DATA="/res/dev/data";
	local DIR_DATA="/data";

	$BB mount -t ext4 $DEVICE_DATA $DIR_DATA;
	$BB rm -f $DIR_DATA/dalvik-cache/*;
	sync;
	$BB umount $DIR_DATA;
}

TUNE_PARTITION()
{
	local DEVICE=$1;
	local LOG=$2;
	local LOG_TMP=$2"-tmp";

	echo "" >> $LOG;
	echo "Version of binaries used:" >> $LOG;
	mknod /dev/null c 1 3;
	chmod 666 /dev/null;
	sh -c "/sbin/e2fsck -V" >> $LOG 2>&1;
	rm -rf /dev/null;
	sh -c "/sbin/tune2fs.static" >> $LOG;
	echo "" >> $LOG;
	# don't tune efs partition
	if [ "$DEVICE" != "/dev/block/mmcblk0p1" ] && [ "$DEVICE" != "/mnt/tmp/.secondrom/cache.img" ] && [ "$DEVICE" != "/mnt/tmp/.secondrom/cache.img" ] && [ "$DEVICE" != "/res/dev/cache" ] ; then
		echo "Tunning partitions begins..."  >> $LOG;
		sh -c "/sbin/tune2fs.static -l $DEVICE" > $LOG_TMP;
		echo "" >> $LOG;
		# set fs-feature -> [^]has_journal
		if [ "$(cat $LOG_TMP | grep 'features' | grep 'has_journal' | wc -l)" -eq "0" ]; then
			sh -c "/sbin/tune2fs.static -O has_journal $DEVICE" >> $LOG 2>&1;
			echo "Added has_journal feature to $DEVICE" >> $LOG;
		else
			echo "Device $DEVICE already have has_journal in features." >> $LOG;
		fi;

		# set fs-feature -> [^]dir_index
		if [ "$(cat $LOG_TMP | grep 'features' | grep 'dir_index' | wc -l)" -eq "0" ]; then
			sh -c "/sbin/tune2fs.static -O dir_index $DEVICE" >> $LOG 2>&1;
			echo "Added dir_index feature to $DEVICE" >> $LOG;
		else
			echo "Device $DEVICE already have dir_index in features." >> $LOG;
		fi;

		# set mount option -> [^]journal_data_writeback
		if [ "$(cat $LOG_TMP | grep 'Default mount options' | grep 'journal_data_writeback' | wc -l)" -eq "0" ]; then
			sh -c "/sbin/tune2fs.static -o journal_data_writeback $DEVICE" >> $LOG 2>&1;
			echo "Added journal_data_writeback default mount option to $DEVICE" >> $LOG;
		else
			echo "Device $DEVICE already have journal_data_writeback in default mount options" >> $LOG;
		fi;

		# set inode to 256
		if [ "$(cat $LOG_TMP | grep 'Inode size' | grep '256' | wc -l)" -eq "0" ]; then
			sh -c "/sbin/tune2fs.static -I 256 $DEVICE" >> $LOG 2>&1;
			echo "Added 256 Inode size to $DEVICE" >> $LOG;
		else
			echo "Device $DEVICE already have 256 Inode size" >> $LOG;
		fi;
			echo "" >> $LOG;
			echo "Tunning partitions ends."  >> $LOG;
			echo "" >> $LOG;
	fi;

	echo "Checking if device has errors..." >> $LOG;
	echo "" >> $LOG;
	sh -c "/sbin/e2fsck -nv $DEVICE" > $LOG_TMP;
	cat $LOG_TMP >> $LOG;
	echo "" >> $LOG;
	if [ "$(cat $LOG_TMP | grep 'clean' | wc -l)" -eq "0" ]; then
		NEED_CHECK;
		echo "DEVICE $DEVICE NEEDS DO BE FIX" >> $LOG;
		echo "0" > $LOG_TMP;
	else
		echo "DEVICE $DEVICE IS CLEAN" >> $LOG;
		echo "1" > $LOG_TMP;
	fi;
	echo "" >> $LOG;

}

FORMAT_ERRORS_LOG()
{
	local LOG=$1;
	local LOG_ERRORS=$2;

	echo "<p>" >> $LOG_ERRORS;
	sed ':a;N;$!ba;s/\n/\<br\>/g' $LOG >> $LOG_ERRORS;
	echo "</p><hr>" >> $LOG_ERRORS;
}

PARTITION_TUNING()
{
	if [ "$SECONDROM" -eq "1" ]; then
		DEVICE_DATA="/mnt/tmp/.secondrom/data.img";
		DEVICE_CACHE="/mnt/tmp/.secondrom/cache.img";
	else
		DEVICE_DATA="/res/dev/data";
		DEVICE_CACHE="/res/dev/cache";
	fi;

	DIR_DATA="/data";
	LOG_DATA="/log-data";
	LOG_DATA_TMP="/log-data-tmp";

	DIR_CACHE="/cache";
	LOG_CACHE="/log-cache";
	LOG_CACHE_TMP="/log-cache-tmp";

	DEVICE_SYSTEM="/res/dev/system";
	DIR_SYSTEM="/system";
	LOG_SYSTEM="/log-system";
	LOG_SYSTEM_TMP="/log-system-tmp";

	DEVICE_PRELOAD="/dev/block/mmcblk0p12";
	DIR_PRELOAD="/preload";
	LOG_PRELOAD="/log-preload";
	LOG_PRELOAD_TMP="/log-preload-tmp";

	DEVICE_EFS="/dev/block/mmcblk0p1";
	LOG_EFS="/log-efs";
	LOG_EFS_TMP="/log-efs-tmp";

	# new empty log
	sh -c "/sbin/date" > $LOG_DATA;
	sh -c "/sbin/date" > $LOG_CACHE;
	sh -c "/sbin/date" > $LOG_SYSTEM;
	if [ "$SECONDROM" -eq "0" ]; then
		sh -c "/sbin/date" > $LOG_PRELOAD;
	fi;
	sh -c "/sbin/date" > $LOG_EFS;

	# umount
	sync;
	$BB umount -l $DIR_DATA;
	$BB umount -l $DIR_CACHE;
	$BB umount -l $DIR_SYSTEM;
	$BB umount -l $DIR_PRELOAD;

	TUNE_PARTITION $DEVICE_CACHE $LOG_CACHE;

	TUNE_PARTITION $DEVICE_DATA $LOG_DATA;

	TUNE_PARTITION $DEVICE_SYSTEM $LOG_SYSTEM;

	if [ "$SECONDROM" -eq "0" ]; then
		TUNE_PARTITION $DEVICE_PRELOAD $LOG_PRELOAD;
	fi;

	TUNE_PARTITION $DEVICE_EFS $LOG_EFS;

	# only if asked by user via stweaks with dalvik cache clean
	if [ -e /mnt/tmp/.run_fs_check ]; then
		# reset the lock-file
		rm -f /mnt/tmp/.run_fs_check;
		DALVIK_CLEAN;

		# run partition fix by forcing full scan and repair
		PARTITION_FIX $DEVICE_DATA $LOG_DATA;
		PARTITION_FIX $DEVICE_CACHE $LOG_CACHE;
		PARTITION_FIX $DEVICE_SYSTEM $LOG_SYSTEM;
		PARTITION_FIX $DEVICE_EFS $LOG_EFS;
		if [ "$SECONDROM" = "0" ]; then
			PARTITION_FIX $DEVICE_PRELOAD $LOG_PRELOAD;
		fi;
	fi;

	AUTOCHECK=0;
	# only if set auto via stweaks without dalvik cache clean
	if [ -e /mnt/tmp/.fix_fs_on_boot_auto ]; then
		# run partition fix by forcing full scan and repair
		if [ "$(cat $LOG_DATA_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			PARTITION_FIX $DEVICE_DATA $LOG_DATA;
		fi;
		if [ "$(cat $LOG_CACHE_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			PARTITION_FIX $DEVICE_CACHE $LOG_CACHE;
		fi;
		if [ "$(cat $LOG_SYSTEM_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			PARTITION_FIX $DEVICE_SYSTEM $LOG_SYSTEM;
		fi;
		if [ "$(cat $LOG_EFS_TMP)" -eq "0" ]; then
			AUTOCHECK=1;
			PARTITION_FIX $DEVICE_EFS $LOG_EFS;
		fi;
		if [ "$SECONDROM" = "0" ]; then
			if [ "$(cat $LOG_SYSTEM_TMP)" -eq "0" ]; then
				AUTOCHECK=1;
				PARTITION_FIX $DEVICE_PRELOAD $LOG_PRELOAD;
			fi;
		fi;
	fi;

	LOG_ERRORS="/log-errors.html";
	# create report to show to user after booting ;)
	if [ "$(cat /tmp/need_check_part)" -eq "1" ] || [ "$AUTOCHECK" -gt 0 ]; then
		if [ "$AUTOCHECK" -gt 0 ]; then
			echo "<html><body><br><p><font size=5 color=GREEN><center>ERRORS IN PARTITIONS DETECTED AND FIXED</center></font></p>" > $LOG_ERRORS;
		else
			echo "<html><body><br><p><font size=5 color=RED><center>ERRORS IN PARTITIONS DETECTED</center></font></p>" > $LOG_ERRORS;
		fi;
		if [ "$(cat $LOG_DATA_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_DATA $LOG_ERRORS;
		fi;
		if [ "$(cat $LOG_CACHE_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_CACHE $LOG_ERRORS;
		fi;
		if [ "$(cat $LOG_SYSTEM_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_SYSTEM $LOG_ERRORS;
		fi;
		if [ "$(cat $LOG_PRELOAD_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_PRELOAD $LOG_ERRORS;
		fi;
		if [ "$(cat $LOG_EFS_TMP)" -eq "0" ]; then
			FORMAT_ERRORS_LOG $LOG_EFS $LOG_ERRORS;
		fi;
		echo '<p><font size=5><center>Please use Stweaks "FIX DATA ON or OFF" option in the other tab to avoid annoying issues or use "Check and repair file system on every boot" to always check and repair partitions.</center></font></p>' >> $LOG_ERRORS;
		echo '<p><font size=5><center>It is advised to perform a nandroid or Titanium Backup similar app before fixing corrupt partitions.<br>Data of app and/or app may be delected if damaged too much!!!</center></font></p>' >> $LOG_ERRORS;
		echo "</body></html>" >> $LOG_ERRORS;
	fi;

}
PARTITION_TUNING;

# mounting system partition
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /res/dev/system /system;

# mounting preloaded partition
$BB mount -t ext4 -o rw,noauto_da_alloc,journal_async_commit /dev/block/mmcblk0p12 /preload;

# umount /dev/block/mmcblk0p11 internal sdcard
sync;
$BB umount -l /mnt/tmp;

# fix sdcards since they are umounted
SDCARD_FIX;

# now that system is mounted create a init.d script to open browser and show partition error log
if [ "$(cat /tmp/need_check_part)" -eq "1" ]; then
	$BB echo "#!/system/bin/sh" > "/system/etc/init.d/99Dalert";
	$BB echo "(sleep 120; am start -a android.intent.action.VIEW -n com.android.browser/.BrowserActivity -d file:///log-errors.html)&" >> "/system/etc/init.d/99Dalert";
	$BB chmod 755 /system/etc/init.d/99Dalert;
	$BB chown root.shell /system/etc/init.d/99Dalert;
else
	$BB rm "/system/etc/init.d/99Dalert";
fi;

SECROM_FUNCTION_AOSP()
{
	# init.rc style JB/CM/AOKP
	if [ "$SECONDROM" -eq "1" ]; then
		$BB mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		$BB sed -i "s/%TYPE%/$FS_SDCARD0/g" /init.smdk4210.rc;
		if [ -e /fstab.smdk4210.sec ]; then
			$BB mv /fstab.smdk4210.sec /fstab.smdk4210
		fi;
		if [ -e /init.rc.2 ]; then
			$BB rm /init.rc.2;
		fi;
	else
		$BB rm /init.smdk4210.rc.2;
		$BB rm /fstab.smdk4210.sec
		if [ -e /init.rc.2 ]; then
			$BB rm /init.rc.2;
		fi;
	fi;
}

SECROM_FUNCTION_SAMMY()
{
	# init.rc style SAMMY JB
	if [ "$SECONDROM" -eq "1" ]; then
		$BB mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		$BB sed -i "s/%TYPE%/$FS_SDCARD0/g" /init.smdk4210.rc;
		$BB mv /init.rc.2 /init.rc
	else
		$BB rm /init.smdk4210.rc.2;
		if [ -e /init.rc.2 ]; then
			$BB rm /init.rc.2;
		fi;
	fi;
}

# linking /system/bin to /bin for crond
ln -s /system/bin/ /bin

# adding latest vendor binary from 3.6.RC6 kernel for all! tested working great
mkdir -p /system/vendor/firmware;
$BB mv /res/misc/vendor/firmware/mfc_fw.bin /system/vendor/firmware/mfc_fw.bin;
$BB chmod 755 /system/vendor/firmware/mfc_fw.bin;

# fix permission to services.jar in case user did a mess, after using my MOD!
$BB chmod 644 /system/framework/services.jar;

# clean old modules from /system
if [ ! -d /system/lib/modules ]; then
        mkdir /system/lib/modules;
fi;
cd /lib/modules/;
for i in *.ko; do
	rm /system/lib/modules/"$i";
done;
cd /;

# move new Kernel modules to /system/lib/modules if possible
SYSTEM_FREE=$($BB df -h | $BB grep system | $BB cut -d " " -f14 | $BB cut -c 1-3);
# if [ "$SYSTEM_FREE" -le "492" ]; then
	$BB mv /lib/modules/*.ko /system/lib/modules/;
	$BB chmod 755 /system/lib/modules/*.ko;
	$BB ln -s /system/lib/modules/* /lib/modules/;
	$BB insmod /system/lib/modules/exfat.ko;
# else
#	$BB insmod /lib/modules/exfat.ko;
# fi;

# mount external sdcard
EXSDCARD;

# one more time set "/" rw just for good sleep
$BB mount -o remount,rw /;

if [ -f /system/recovery.cpio.gz ]; then
	$BB zcat /system/recovery.cpio.gz | cpio -idmu;
fi;

# ROM check init
CM_AOKP_10_JB=$(find /system/bin/wfd | wc -l);
CM_AOKP_10_JB=$($BB cat /system/build.prop | $BB grep "ro.build.version.release=4.2" | wc -l);
CM_AOKP_4_3_JB=$($BB cat /system/build.prop | $BB grep "ro.build.version.release=4.3" | wc -l);
CM_AOKP_11_KITKAT=$($BB cat /system/build.prop | $BB grep "ro.build.version.release=4.4" | wc -l);
CM_AOKP_12_1_LP=$($BB cat /system/build.prop | $BB grep "ro.build.version.release=5.1" | wc -l);
CM_AOKP_PAC=$(find /system/framework/framework-pac.jar | wc -l);
CM_AOKP_BAM=$(find /system/framework/framework-bam.jar | wc -l);
JBSAMMY=$(find /system/lib/libSamsungAnimation.so | wc -l);
JBSAMMY2=$(find /system/lib/lib_Samsung_Resampler.so | wc -l);

USER_ACTIONS()
{
	if [ "$JBSAMMY" -eq "1" ]; then
		$BB cp -a /sbin/adbd.jb /sbin/adbd;
		$BB chmod 755 /sbin/adbd;
	elif [ "$CM_AOKP_4_3_JB" -eq "1" ]; then
		$BB cp -a /sbin/adbd.cm10.2 /sbin/adbd;
		$BB chmod 755 /sbin/adbd;
	elif [ "$CM_AOKP_11_KITKAT" -eq "1" ]; then
		$BB cp -a /sbin/adbd.cm11 /sbin/adbd;
		$BB chmod 755 /sbin/adbd;
	elif [ "$CM_AOKP_12_1_LP" -eq "1" ]; then
		$BB cp -a /sbin/adbd.cm12.1 /sbin/adbd;
		$BB chmod 755 /sbin/adbd;
	fi;

	# only if asked by user via stweaks
	if [ -e /system/run_fix_media ]; then
		# data mount
		$BB mount -t ext4 /res/dev/data /data;

		mkdir /sdcardtmp;
		$BB chmod 777 /sdcardtmp;
		if [ "$FS_SDCARD0" == "exfat" ]; then
			/system/bin/mount.exfat-fuse /dev/block/mmcblk0p11 /sdcardtmp;
		else
			$BB mount -t $FS_SDCARD0 /dev/block/mmcblk0p11 /sdcardtmp;
		fi;
		$BB rm -f /system/run_fix_media;

		if [ -e /sdcardtmp/Android/data/ ]; then
			$BB rm -rf /sdcardtmp/Android/data/com.cooliris.media;
			$BB rm -rf /sdcardtmp/Android/data/com.android.gallery3d;
			$BB rm -rf /sdcardtmp/Android/data/com.google.android.gallery3d;
			$BB rm -rf /sdcardtmp/Android/data/com.android.providers.media;
			$BB rm -rf /sdcardtmp/Android/data/com.google.android.music;
			$BB rm -rf /data/data/com.android.providers.media/databases/*;
		fi;
		# sdcard unmount
		sync;
		$BB umount -l /sdcardtmp;
		if [ "$($BB du -h /sdcardtmp | grep 4 | cut -c1-4)" == "4.0K" ]; then
			$BB rm -rf /sdcardtmp;
		fi;

		# data unmount
		sync;
		$BB umount -l /data;
	fi;
}

BOOTROM()
{
	USER_ACTIONS;
	$BB rm -f /sbin/mount;
	$BB rm -f /sbin/start;
	$BB chmod -R 777 /tmp/;
	exec /sbin/init.samsung;
}

POWER_SQL_JB()
{
	$BB chmod 644 /system/lib/libsqlite.so;
	$BB chmod 755 /system/xbin/sqlite3;
	$BB rm -rf /res/misc/sql/;
}

POWER_SQL_JB_4_3()
{
	$BB cp -a /res/misc/sql/jb-4-3/libsqlite.so /system/lib/libsqlite.so;
	$BB cp -a /res/misc/sql/jb-4-3/sqlite3 /system/xbin/sqlite3;
	$BB chmod 644 /system/lib/libsqlite.so;
	$BB chmod 755 /system/xbin/sqlite3;
	$BB rm -rf /res/misc/sql/;
}

POWER_SQL_KITKAT()
{
	$BB cp -a /res/misc/sql/kitkat/libsqlite.so /system/lib/libsqlite.so;
	$BB cp -a /res/misc/sql/kitkat/sqlite3 /system/xbin/sqlite3;
	$BB chmod 644 /system/lib/libsqlite.so;
	$BB chmod 755 /system/xbin/sqlite3;
	$BB rm -rf /res/misc/sql/;
}

POWER_SAMMY_SQL_JB()
{
	$BB chmod 644 /system/lib/libsqlite.so;
	$BB chmod 755 /system/xbin/sqlite3;
	$BB rm -rf /res/misc/sql/;
}

# Kernel check init
KERNEL_9X=$(cat /proc/version | $BB awk "/V9./ {print $3}" | wc -l);
KERNEL_10X=$(cat /proc/version | $BB awk "/V10./ {print $3}" | wc -l);

# network tuning reset to allow real ROM control over H/H+/3G/G signal.
$BB sed -i "s/ro.ril.hsxpa=[0-9]*//g" /system/build.prop;
$BB sed -i "s/ro.ril.gprsclass=[0-9]*//g" /system/build.prop;

# system dalvik.vm tuning.
$BB sed -i "s/dalvik.vm.heapsize=[0-9a-zA-Z]*/dalvik.vm.heapsize=128m/g" /system/build.prop;
$BB sed -i "s/dalvik.vm.heapstartsize=[0-9a-zA-Z]*/dalvik.vm.heapstartsize=5m/g" /system/build.prop;
$BB sed -i "s/dalvik.vm.heapgrowthlimit=[0-9a-zA-Z]*/dalvik.vm.heapgrowthlimit=48m/g" /system/build.prop;
$BB sed -i "s/dalvik.vm.heapminfree=[0-9a-zA-Z]*/dalvik.vm.heapminfree=512k/g" /system/build.prop;

# we can OC to 1.5Ghz.
$BB sed -i "s/ro.device.cpu=Dual-core 1.2GHz ARM Cortex-A9/ro.device.cpu=Dual-core 1.5GHz ARM Cortex-A9/g" /system/build.prop;

# fix perm for init files in /tmp/
$BB chmod -R 777 /tmp/;

######################################
# Starting ROM choose and INIT config.
######################################

# check CLASSPATH files.
CLEAN_MSIM()
{
	$BB sed -i "s/:[/]system[/]framework[/]telephony-msim.jar//g" /init.rc;
}

if [ "$JBSAMMY" -eq "1" ] || [ "$JBSAMMY2" -eq "1" ]; then
	if [ "$KERNEL_9X" -eq "1" ] || [ "$KERNEL_10X" -eq "1" ]; then
		echo "wrong kernel" > /tmp/wrong_kernel;
	fi;
	# Injecting JB Modded by Dorimanx, SUPER libsqlite!
	POWER_SAMMY_SQL_JB;
	echo "2" > /proc/sys/kernel/rom_feature_set;
	$BB cp -a /res/misc/JellyB-Sammy/* /;
	$BB rm -rf /res/misc/JellyB-*;
	$BB rm -rf /res/misc/KitKat-*;
	$BB rm -rf /res/misc/Lollipop-*;
	if [ -e /sys/devices/virtual/sec/sec_key/set_homekey ]; then
		echo "172" > /sys/devices/virtual/sec/sec_key/set_homekey;
	fi;
	# for sbin/ext/install.sh and for res/crontab_service/service.sh
	$BB echo "1" > /tmp/sammy_rom;

	GPIO_KEYS=/system/usr/keylayout/gpio-keys.kl
	if [ -e $GPIO_KEYS ]; then
		if grep -q 102 $GPIO_KEYS; then
			$BB sed -i 's/102/172/g' $GPIO_KEYS;
		fi;
	fi;

	SECROM_FUNCTION_AOSP;

elif [ "$CM_AOKP_4_3_JB" -eq "1" ]; then
	echo "3" > /proc/sys/kernel/rom_feature_set;
	# Injecting JB Modded by Dorimanx and Fusionjack, SUPER libsqlite!
	POWER_SQL_JB_4_3;
	$BB cp -a /res/misc/JellyB-CM-AOKP-10.2/* /;
	if [ "$CM_AOKP_PAC" -eq "1" ]; then
		$BB cp -a res/misc/JellyB-CM-AOKP-PAC-4-3/* /;
	elif [ "$CM_AOKP_BAM" -eq "1" ]; then
		$BB cp -a res/misc/JellyB-CM-AOKP-BAM-4-3/* /;
	fi;
	$BB rm -rf /res/misc/JellyB-*;
	$BB rm -rf /res/misc/KitKat-*;
	$BB rm -rf /res/misc/Lollipop-*;
	# for sbin/ext/install.sh
	echo "1" > /tmp/cm10.2-installed;

	if [ ! -e /system/framework/telephony-msim.jar ]; then
		CLEAN_MSIM;
	fi;

	SECROM_FUNCTION_AOSP;

elif [ "$CM_AOKP_10_JB" -eq "1" ]; then
	echo "3" > /proc/sys/kernel/rom_feature_set;
	# Injecting JB Modded by Dorimanx, SUPER libsqlite!
	POWER_SQL_JB;
	$BB cp -a /res/misc/JellyB-CM-AOKP-10.1/* /;
	$BB rm -rf /res/misc/JellyB-*;
	$BB rm -rf /res/misc/KitKat-*;
	$BB rm -rf /res/misc/Lollipop-*;
	# for sbin/ext/install.sh
	echo "1" > /tmp/cm10.1-installed;

	SECROM_FUNCTION_AOSP;

elif [ "$CM_AOKP_11_KITKAT" -eq "1" ]; then
	echo "3" > /proc/sys/kernel/rom_feature_set;
	# Injecting KitKat Modded by FusionJack, SUPER libsqlite!
	POWER_SQL_KITKAT;
	$BB cp -a /res/misc/KitKat-CM-AOKP-11/* /;
	if [ "$CM_AOKP_PAC" -eq "1" ]; then
		$BB cp -a res/misc/KitKat-CM-AOKP-PAC-4-4/* /;
	elif [ "$CM_AOKP_BAM" -eq "1" ]; then
		$BB cp -a res/misc/KitKat-CM-AOKP-BAM-4-4/* /;
	fi;
	$BB rm -rf /res/misc/JellyB-*;
	$BB rm -rf /res/misc/KitKat-*;
	$BB rm -rf /res/misc/Lollipop-*;
	# for sbin/ext/install.sh
	echo "1" > /tmp/cm10.2-installed;
	# for sbin/ext/post_init.sh
	echo "1" > /tmp/cm11-installed;

	SECROM_FUNCTION_AOSP;

elif [ "$CM_AOKP_12_1_LP" -eq "1" ]; then
	echo "3" > /proc/sys/kernel/rom_feature_set;
	$BB cp -a /res/misc/Lollipop-CM-AOKP-12.1/* /;
	$BB rm -rf /res/misc/JellyB-*;
	$BB rm -rf /res/misc/KitKat-*;
	$BB rm -rf /res/misc/Lollipop-*;
	# for sbin/ext/install.sh
	echo "1" > /tmp/cm10.2-installed;
	# for sbin/ext/post_init.sh
	echo "1" > /tmp/cm11-installed;

	SECROM_FUNCTION_AOSP;
else
	echo "wrong kernel" > /tmp/wrong_kernel;
fi;

# if found by ROM detector and function finished, boot the detected ROM.
BOOTROM;
